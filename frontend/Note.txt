                                                📆 16/04/2025

                                   React + Tailwind CSS Project – Learning Steps
✅ Step 1
--> Initializing the project and building the folder structure.

✅ Step 2
--> Setting up the style library (Tailwind CSS).
--> Just initializing the app with a simple title – "Hello World".

✅ Step 3
--> Building components
note: 1 component = 1 file

What is a component?
→ A function that accepts props and returns JSX.

What is py and px in Tailwind?
→ py = padding-top + padding-bottom (y-axis)
→ px = padding-left + padding-right (x-axis)

Condition in Navbar?
→ If we need to show/hide the menu, we need state.
→ We use React's useState hook.
→ We create a local variable like const [open, setOpen] = useState(false).

✅ Step 4
--> Building HomeScreen where all products are shown.
--> Created ProductCard component to display each product.
--> Created Rating component to show star ratings.

✅ Step 5
--> Adding react-router-dom to the app for routing.
--> Using { Link } from react-router-dom to go between pages.

📌 What is <Link>?
→ Used for navigating between pages without reloading the page.
→ Takes a to prop.
Example: <Link to="/Homescreen">Home</Link> 

✅ Step 6
--> Creating ProductScreen → Single product page showing all product info.

📌 URL Example: /product/4, /product/50
→ The number (4, 50, etc.) is dynamic and changes based on the product.

In App.jsx, define a route with a dynamic param:
 
              <Route path="/product/:id" element={<ProductScreen />} />
To get the id from the URL, use the hook:

              const data = useParams();  
              console.log(data); 

If the route is /product/4 → we get { id: 4 }
If route is /product/:prodId → we get { prodId: 4 }

So whatever name you define in the route (:id, :prodId, etc.), you get the same key in the returned object.

Destructure it:
const { id } = useParams();
Now we can use id to fetch product details.

==> Once we got the id from useParams, we can use it to find the matching product and show its details on the 
    single product page.
==> 🔍 How to do it?
    -> We'll use the .find() method on the product list (array) to get the exact product.
    -> const product = products.find((prod) => prod._id === id);
    🤔 What’s happening here?
    -> We're searching inside the products array.
    -> For every product (prod), we check:
       prod._id === id
    -> If it's a match, we return that product and store it in the product variable.
    -> Now we can use product to show its image, name, description, price, etc.
==> 🔁 Reminder:
    If your id from useParams() is a string (which it usually is), and your _id is a number, you might need to 
    convert it:    
    const product = products.find((prod) => prod._id === Number(id));
